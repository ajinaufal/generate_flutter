import 'dart:io';

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:{{project_name}}/core/core.dart';
import 'package:dartz/dartz.dart';

final exampleRepositoriesProvider = Provider.autoDispose<ExampleRepository>((ref) {
  ref.onDispose(() {});
  return ExampleRepositoriesImpl(
    remoteDataSource: ExampleRemoteDataSourceImpl(
      apiService: ApiService(),
    ),
    networkInfo: NetworkInfoImpl(
      dataConnectionChecker: InternetConnectionChecker(),
    ),
  );
});

class ExampleRepositoriesImpl implements ExampleRepository {
  const ExampleRepositoriesImpl({
    required this.remoteDataSource,
    required this.networkInfo,
  });

  final NetworkInfo networkInfo;
  final ExampleRemoteDataSource remoteDataSource;

  @override
  Future<Either<Failure, ExampleEntity>> getExample(

  ) async {
    if (await networkInfo.isConnected) {
      try {
        final resp = await remoteDataSource.getExample();
        return Right(resp);
      } on SocketException {
        return const Left(SocketFailure());
      } catch (_) {
        return const Left(ServerFailure());
      }
    }
    return const Left(NetworkFailure());
  }
}
